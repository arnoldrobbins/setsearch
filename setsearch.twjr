\input texinfo   @c -*-texinfo-*-
@c vim: filetype=texinfo tabstop=4 shiftwidth=4
@c %**start of header (This is for running Texinfo on a region.)
@setfilename setsearch.info
@settitle Efficient Searching of Large Character Sets
@c %**end of header (This is for running Texinfo on a region.)

@c Change how xref titles are quoted.
@dquotexrefs
@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear


@c The following information should be updated here only!
@c This sets the edition of the document.

@c These apply across the board.
@set UPDATE-MONTH January, 2024
@set EDITION 0.1

@set TITLE Efficient Searching of Large Character Sets
@set SHORTTITLE Searching Character Sets

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c @finalout
@end iftex

@copying
@docbook
<para>Published by:</para>

<literallayout class="normal">Arnold David Robbins
P.O. Box 354
Nof Ayalon 9978500
ISRAEL
Email: <email>arnold@@skeeve.com</email>
URL: <ulink url="https://www.skeeve.com/">https://www.skeeve.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; 2024
Arnold David Robbins
All Rights Reserved.</literallayout>
@end docbook

@ifnotdocbook
Copyright @copyright{} 2024 @*
Arnold David Robbins @*
All Rights Reserved.
@end ifnotdocbook
@sp 1
The setsearch program is copyright
@copyright{} 2024 by Arnold David Robbins.
@c It is published under the conditions of a BSD license yet to be determined.
Not for publication, yet.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.
@end copying

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@c @setchapternewpage odd

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@titlepage
@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author Arnold David Robbins

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
Arnold David Robbins @*
P.O. Box 354 @*
Nof Ayalon 9978500 @*
ISRAEL @*
Email: @EMAIL{arnold@@skeeve.com,arnold AT skeeve.com} @*
URL: @url{https://www.skeeve.com/} @*

@insertcopying
@end ifnotdocbook
@end titlepage

@set DRAFT @i{DRAFT}

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top General Introduction
@c Preface node should come right after the Top
@c node, in `unnumbered' sections, then the introductory chapter.
@c Licensing nodes are appendices, they're not central to TexiWebJr.

This file documents @code{setsearch}, a set of functions that accept
a wide character value and search a defined set of characters to
see if the value is in the set.  It is intended for use within
a regular expression matching library.

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@menu
@detailmenu
@end detailmenu
@end menu

@c @summarycontents
@contents

@c Add these to the menu if they ever get included.
@c @node Foreword
@c @unnumbered Foreword

@node Preface
@unnumbered Preface

This @value{DOCUMENT} documents @code{setsearch}, a set of functions that accept
a wide character value and search a defined set of characters to
see if the value is in the set.  It is intended for use within
a regular expression matching library.

@menu
* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
* Acknowledgements::            Acknowledgements.
@end menu

@node Audience
@unnumberedsec Intended Audience

If you're interested in one way to search bracket expressions for
a matching character value when using very large character sets
(such as Unicode), you should read this @value{DOCUMENT}.

@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{https://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@node Acknowledgements
@unnumberedsec Acknowledgements

Your name here@dots{}

@node Introduction
@chapter Introduction

In the fall of 2023, Mike Haertel started writing a new regular expression library,
@code{minrx}, with the aim of eventually replacing the matchers in use by GNU Awk
(@command{gawk}).  The initial version is in C++; it will eventually be translated
to C for portability. As of December 2023, it's working fully, with the exception
of matching multibyte-encoded characters.

As part of the discussion between Mike and myself, I offered a rough draft of a
data structure to use for quickly seeing if a character matches a @dfn{bracket expression},
which is a construct used with regular expressions to represent sets of different
kinds of characters to be matched.

The ideas for this data structure and how to use it have been bouncing around in
my head for some time. This @value{DOCUMENT} presents the design and implementation
of a sublibrary (so to speak) for dealing with bracket expressions.

@node API
@chapter The C API

The routines here will eventually be called from C.  I've chosen to just
write everything in C from the beginning, since the ideas are pretty straightforward
and I don't need any of the fancy capabilities of C++.

API design needs careful thought. In this case, we have to take into account
how these routines will be used by a regular expression matcher. Here is
the header file with the declarations.  I've chosen to keep the data structures
opaque, and to provide routines that manipulate them and return results.

@(bracketexpr.h@)=
#ifndef BRACKET_EXPR_H
#define BRACKET_EXPR_H  1

@<Copyright statement@>

#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _bracket_expr BRACKET_EXPR;

const BRACKET_EXPR *bracket_expr_create(const char *expr,
                                        char **endp,
                                        bool escapes_allowed,
                                        bool ignore_case,
                                        char *errbuf,
                                        size_t errbuf_size);

bool bracket_expr_match(const BRACKET_EXPR *brack_expr,
                        int32_t the_char);

bool bracket_expr_free(const BRACKET_EXPR *brack_expr);

void bracket_expr_dump(const BRACKET_EXPR *brack_expr, FILE *fp);

#ifdef __cplusplus
}
#endif
#endif // BRACKET_EXPR_H
@

The routines and what they do are as follows:

@table @code
@item const BRACKET_EXPR *bracket_expr_create(const char *expr,
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ char **endp,
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ bool escapes_allowed,
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ bool ignore_case,
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ char *errbuf,
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ size_t errbuf_size)
This function parses the bracket expression, and if successful, returns
a pointer to an opaque @code{BRACKET_EXPR} structure to be used by other
routines. Upon failure, it returns @code{NULL}.  The parameters are:

@c nested table
@table @code
@item const char *expr
A pointer to the opening @samp{[} of the bracket expression.
@code{expr} must be a NUL-terminated standard C string.

@item char **endp
A pointer to a pointer. Upon success, @code{*end} is set to point to
the byte immediately following the closing @samp{]}.

@item bool escapes_allowed
This should be set to
@code{true} if @samp{\} may be used to
escape characters within the bracket expression, such as @code{[ab\]d]},
which is needed for the @command{awk} language.

@item bool ignore_case
This should be set to true if case should be ignored; e.g., @samp{a} and @samp{A}
should be treated equivalently.

@item char *errbuf
The address of a buffer into which @code{bracket_expr_create()} will
write a message upon failure.
The message will@footnote{Eventually.}
already have been translated by @code{gettext()}.

@item size_t errbuf_size
The size of @code{errbuf}'s buffer.
@end table
@c end nested table

@item bool bracket_expr_match(const BRACKET_EXPR *brack_expr, int32_t the_char)
Return true if @code{the_char} is found in the set described by
@code{brack_expr}, @code{false} otherwise.

@item bool bracket_expr_free(const BRACKET_EXPR *brack_expr)
Release the storage used by @code{brack_expr}. Return @code{false}
if @code{brack_expr} is @code{NULL}, @code{true} otherwise.

@item void bracket_expr_dump(const BRACKET_EXPR *brack_expr, FILE *fp)
Dump the internal data structures to the given open file.
I could instead have provided a variable @samp{extern FILE *brack_expr_fp}
initialized to @code{stderr}, but that isn't thread-safe; it's better
to not depend upon global variables.
@end table

The API of @code{bracket_expr_create()} is intended to be easy to
use by the compilation phase of regexp matcher, which has to
work its way through the entire text of the regexp.
As soon as @samp{[} is seen, the compilation phase can call
@code{bracket_expr_create()}, and then continue scanning at @code{*end}.

The source code starts out with the usual includes,
followed by the other things one might expect:

@(bracketexpr.c@)=
@<Copyright statement@>

@<includes@>

#include "bracketexpr.h"	// for the BRACKET_EXPR typedef

@<data structures@>

@<helper functions@>

@<API functions@>
@

To get it out of the way, here is the copyright statement.

@<Copyright statement@>=
// Copyright (C) 2024, Arnold David Robbins.
// All rights reserved.  Not for redistribution (yet...).
@

We include the standard header files that we'll need:

@<includes@>=
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include <wctype.h>
@

@node The Data Structures
@chapter The Data Structures

A single item in the set is represented by
a set item:

@<data structures@>=
typedef struct set_item {
	enum set_item_type {
		CTYPE_ITEM,
		RANGE_ITEM,
	} item_type;
	union {
		int (*iswXXX)(wint_t wc);
		struct _range {
			int32_t start, end;
		} r;
	} u;
} set_item;
#define iswXXX	u.iswXXX
#define start	u.r.start
#define end		u.r.end
@

A @code{set_item} holds either a function pointer to a function
such as @code{iswalpha()}, corresponding to the
character class @code{[:alpha:]} within a bracket expression,
or a range, such as @code{[a-z]}. Single characters that
aren't contiguous with others are placed in a range where
@code{start} and @code{end} are set to the same value.

The full bracket expression holds a dynamically allocated
array of @code{set_items}, plus what's needed for managing
the memory:

@<data structures@>=
struct _bracket_expr {
	bool	complemented;	// For [^...] sets
	size_t	nelems;			// Number of elements in use
	size_t	allocated;		// Number allocated.
	set_item *items;		// Array of items
};
@

@node The Easy Stuff
@chapter The Easy Functions

Let's get the easier functions out of the way.
A fundamental assumption is that the array of items
is sorted and uniqued. In addition, all @code{CTYPE_ITEM}s
are at the front of the array, so that they can be tested
first.

@<API functions@>=
/* bracket_expr_match --- see if a character matches the expression */

bool
bracket_expr_match(const BRACKET_EXPR *brack_expr, int32_t the_char)
{
	if (brack_expr == NULL)
		return false;

	bool found = is_found(brack_expr, the_char);
	if (brack_expr->complemented)
		found = ! found;		// reverse sense of the match

	return found;
}

/* bracket_expr_free --- free all storage */

bool
bracket_expr_free(const BRACKET_EXPR *brack_expr)
{
	if (brack_expr == NULL)
		return false;

	free((void *) brack_expr->items);
	free((void *) brack_expr);

	return true;
}
@

@node Searching
@section Searching For A Character

The actual searching is separate from the ``is complemented'' test to
keep things simple. The @code{CTYPE_ITEM}s are checked first, since
each one can match multiple characters with a single function call:

@<helper functions@>=
static set_item key;

@<item comparison function@>

/* is_found --- return true if the character is found */

static bool
is_found(const BRACKET_EXPR *brack_expr, int32_t the_char)
{
	set_item *set = brack_expr->items;
	int i;

	for (i = 0; i < brack_expr->nelems; i++) {
		// linear search of ctype items, there can be
		// no more than 12 of them.
		if (set[i].item_type == RANGE_ITEM)
			break;

		assert(set[i].item_type == CTYPE_ITEM);
		if (set[i].iswXXX(the_char))
			return true;
	}

	if (i >= brack_expr->nelems)
		return false;

	assert(set[i].item_type == RANGE_ITEM);

	// binary search to see if we have it
	set_item *found;
	key.item_type = RANGE_ITEM;
	key.start = key.end = the_char;

	found = bsearch(& key, set + i, brack_expr->nelems - i,
					sizeof(set_item), item_compare_for_searching);

	return found != NULL;
}
@

We need the header file for assertions:

@<includes@>=
#include <assert.h>
@

We need two comparison functions: one for use by @code{bsearch()} and
a different one for use by by @code{qsort()}.  We
want @code{CTYPE_ITEM}s to sort to the front of the list.  For sorting,
we sort the @code{RANGE_ITEM}s based on their @code{start} value.
For searching, we have to compare with the value in @code{key},
and we will only be looking at @code{RANGE_ITEM}s.

The comparisons are fundamentally different. When sorting,
we're comparing array elements against each other. When
searching, we compare elements one at a time against a key.
The sorting comparison is more elaborate:

@<helper functions@>=
/* item_compare_for_sorting --- compare two set_items */

static int
item_compare_for_sorting(const void *l, const void *r)
{
	set_item *left = (set_item *) l;
	set_item *right = (set_item *) r;

	if (left->item_type == CTYPE_ITEM && right->item_type == CTYPE_ITEM) {
		// compare pointers
		if (left->iswXXX < right->iswXXX)
			return -1;
		else if (left->iswXXX == right->iswXXX)
			return 0;
		else
			return +1;
	} else if (left->item_type == CTYPE_ITEM && right->item_type == RANGE_ITEM) {
		return -1;
	} else if (left->item_type == RANGE_ITEM && right->item_type == CTYPE_ITEM) {
		return +1;
	} else {
		assert(left->item_type == RANGE_ITEM && right->item_type == RANGE_ITEM);
		return left->start - right->start;
	}
}
@

The searching function is simpler.  We do need to know
which of the two items is the key and which is
the element.  On GNU/Linux with GLIBC, and macOS, the first argument
is the key@footnote{@xref{Checking @code{bsearch()}}, for
more information.},
but we make provision in case things work differently.

@strong{FIXME:} I'm thinking that it's safe to assume that
the first comparison argument is always the key. Thoughts?

@<item comparison function@>=
/* item_compare_for_searching --- compare two set_items */

static int
item_compare_for_searching(const void *k, const void *e)
{
	set_item *thekey = (set_item *) k;
	set_item *elem = (set_item *) e;

	if (elem == & key)
		return item_compare_for_searching(elem, thekey);	// swap

	assert(thekey->item_type == RANGE_ITEM && elem->item_type == RANGE_ITEM);

	if (elem->start <= thekey->start && thekey->start <= elem->end)
		return 0;	// found it
	else if (thekey->end < elem->start)
		return -1;
	else {
		assert(thekey->start > elem->end);
		return 1;
	}
}
@

@node Printing
@section Printing The Data Structure

Dumping the data requires a table of @code{<wctype.h>} functions
that will be useful both for debugging and for construction of
the data.

@<data structures@>=
@<global data@>
@

@<global data@>=
static struct _ctype_functions {
	const char *name;		// name
	int (*fp)(wint_t ch);	// function pointer
} ctype_functions[] = {
	{ "[:alnum:]", iswalnum },
	{ "[:alpha:]", iswalpha },
	{ "[:blank:]", iswblank },
	{ "[:cntrl:]", iswcntrl },
	{ "[:digit:]", iswdigit },
	{ "[:graph:]", iswgraph },
	{ "[:lower:]", iswlower },
	{ "[:print:]", iswprint },
	{ "[:punct:]", iswpunct },
	{ "[:space:]", iswspace },
	{ "[:upper:]", iswupper },
	{ "[:xdigit:]", iswxdigit },
	{ NULL, NULL }
};
@

@<API functions@>=
/* bracket_expr_dump --- dump out the data structures */

void
bracket_expr_dump(const BRACKET_EXPR *brack_expr, FILE *fp)
{
	if (brack_expr == NULL || fp == NULL)
		return;

	if (brack_expr->complemented)
		fprintf(fp, "complemented = true\n");

	set_item *set = brack_expr->items;
	for (int i = 0; i < brack_expr->nelems; i++) {
		if (set[i].item_type == CTYPE_ITEM) {
			fprintf(fp, "%3d. CTYPE: %s\n", i,
				find_ctype_name(set[i].iswXXX));
			continue;
		}
		assert(set[i].item_type == RANGE_ITEM);
		fprintf(fp, "%3d. RANGE: start = L'%lc', end = L'%lc'\n",
			i, set[i].start, set[i].end);
	}
	fflush(fp);
}
@

Matching the function to the name is done with a
simple linear search.

@<helper functions@>=
/* find_ctype_name --- helper function to get the name from a function pointer */

static const char *
find_ctype_name( int (*fp)(wint_t ch) )
{
	for (int i = 0; ctype_functions[i].fp != NULL; i++)
		if (ctype_functions[i].fp == fp)
			return ctype_functions[i].name;

	return NULL;	// really shouldn't happen
}
@

@node Parsing the set
@chapter Parsing The Set

Now that we've seen how the data structures are used
once they've been built, we get to the hard part, which
is transforming the text of the bracket expression
into the data structure.

@<API functions@>=
/* bracket_expr_create --- parse the expression and build a BRACKET_EXPR */

const BRACKET_EXPR *bracket_expr_create(const char *expr,
                                        char **endp,
                                        bool escapes_allowed,
										bool ignore_case,
                                        char *errbuf,
                                        size_t errbuf_size)
{
	if (expr == NULL || endp == NULL) {
		snprintf(errbuf, errbuf_size, "bad pointers received");
		return NULL;
	} else if (*expr != '[') {
		snprintf(errbuf, errbuf_size, "bad bracket expression");
		return NULL;
	}

	@<allocate initial data@>
	set_item *items = bracket_expr->items;

	const char *cp, *last;
	cp = expr + 1;
	last = cp + strlen(cp);

	@<special cases at the beginning@>

	const size_t mb_cur_max = MB_CUR_MAX;

	// main loop:
	for (; cp < last && *cp != ']'; cp++) {
		if (*cp == '\\' && escapes_allowed) {
			cp++;
			if (cp == last) {
				snprintf(errbuf, errbuf_size, "unterminated expression");
				return NULL;
			}
		}

		@<process @code{[:...:]} items@>
		@<process @code{[=...=} items@>
		@<process @code{[.X.]} items@>

		wint_t first_wc, second_wc;
		@<get first wide character@>
		if (*cp == '-') {
			cp++;
			@<get second wide character@>
			if (second_wc < first_wc) {
					snprintf(errbuf, errbuf_size, "invalid range L'%lc'-L'%lc'", first_wc, second_wc);
					return NULL;
			}
			if (! push_range_item(bracket_expr, ignore_case, first_wc, second_wc, errbuf, errbuf_size))
				goto fail;

			cp--;	// compensate for loop
			continue;
		}
		// push first_wc onto wide character list
		if (! push_wc(first_wc, errbuf, errbuf_size))
			goto fail;

		cp--;	// compensate for loop
	}

	@<sort wide character list@>
	@<condense wide character list into @code{RANGE_ITEM}s@>
	@<condense final array of @code{set_item}s@>

	if (*cp != ']') {
		snprintf(errbuf, errbuf_size, "no closing bracket");
		goto fail;
	}

	*endp = (char *) ++cp;

	return bracket_expr;

fail:
	bracket_expr_free(bracket_expr);
	return NULL;
}
@

An @samp{^} as the first character in the bracket expression complements
it. To get a literal @samp{-}, it can be the first character in the expressions.

@<special cases at the beginning@>=
// special cases at the beginning
if (*cp == '^') {
	bracket_expr->complemented = true;
	cp++;
}

if (*cp == '-') {
	// '-' as first character is taken literally
	if (! push_range_item(bracket_expr, ignore_case, L'-', L'-', errbuf, errbuf_size))
		goto fail;
	cp++;
}
@

Allocating the various bits of data is the usual @code{malloc()},
check for errors, and @code{memset()} to zero:

@<allocate initial data@>=
@<allocate @code{bracket_expr}@>
@<allocate items@>
@

@<allocate @code{bracket_expr}@>=
BRACKET_EXPR *bracket_expr = (BRACKET_EXPR *) malloc(sizeof(BRACKET_EXPR));
if (bracket_expr == NULL) {
	snprintf(errbuf, errbuf_size, "out of memory for expr");
	return NULL;
}
memset(bracket_expr, 0, sizeof(BRACKET_EXPR));
@

@<allocate items@>=
#define INITIAL_SIZE 10
bracket_expr->items = (set_item *) malloc(INITIAL_SIZE * sizeof(set_item));
if (bracket_expr->items == NULL) {
	snprintf(errbuf, errbuf_size, "out of memory for items");
	goto fail;
}
memset(bracket_expr->items, 0, INITIAL_SIZE * sizeof(set_item));
bracket_expr->allocated = INITIAL_SIZE;
bracket_expr->nelems = 0;
@

We will come back to the various kinds of items such as @code{[:alpha:]} that
can occur inside brackets.  First, let's think about dealing with
regular characters and with simple ranges.

@node Handing ranges
@section Handling Ranges

We can have all kinds of weird cases, such as @code{[abcdapfedr-sz]}.
If this is reduced to the minimum, it becomes @code{[a-fpr-sz]}. We
need to be able to organize the (wide) characters such that we can
condense them down to this minimum sort of list.  To do that, we
first create a simple array of wide characters that we fill
one by one. In this case, the initial contents would be
@code{abcdapfedz}. The range @code{r-s} is added directly
to @code{bracket_expr->items} and is dealt with later.

Once the array of wide characters is built, we next sort it,
attaining @code{aabcdefpz}. It can be uniqued and turned
into one or more ranges in the final step, yielding
first @code{abcdefpz} and finally @code{a-fpz}.

The range items will then be: @code{r-s}, @code{a-f}, @code{p-p} and
@code{z-z}. Another sorting pass yields @code{a-f}, @code{p-p},
@code{r-s} and @code{z-z}.
The sorted @code{RANGE_ITEM}s are then condensed by removing duplicates
and collapsing overlapping ranges.

First, we need some global data:

@<global data@>=
static wint_t *wide_chars = NULL;
static size_t wc_allocated = 0;
static size_t wc_inuse = 0;
@

Next, we need to allocate memory for the
array of wide characters, and initialize the memory.

@<allocate initial data@>=
@<allocate wide character array@>
@

@<allocate wide character array@>=
if (wide_chars == NULL) {	// first time through
	wide_chars = (wint_t *) malloc(INITIAL_SIZE * sizeof(wint_t));
	if (wide_chars == NULL) {
		snprintf(errbuf, errbuf_size, "out of memory for wide characters");
		goto fail;
	}
	wc_allocated = INITIAL_SIZE;
}
// always zero out the array, as we may have to make many BRACKET_EXPRs
memset(wide_chars, 0, wc_allocated * sizeof(wint_t));
wc_inuse = 0;
@

Next, we need a function to add a wide character
to the array. It's very straightforward:

@<helper functions@>=
/* push_wc --- add a wide character to the list */

static bool
push_wc(wint_t wc, char *errbuf, size_t errbuf_size)
{
	if (wc_inuse + 1 >= wc_allocated) {
		int new_amount = wc_allocated * 2;
		wint_t *new_data = (wint_t *) realloc(wide_chars, new_amount * sizeof(wint_t));

		if (new_data == NULL) {
			snprintf(errbuf, errbuf_size, "out of memory for more wide characters");
			return false;
		}
		memset(new_data + wc_allocated, 0, wc_allocated * sizeof(wint_t));
		wc_allocated = new_amount;
		wide_chars = new_data;
	}
	wide_chars[wc_inuse++] = wc;
	return true;
}
@

We have to pull the wide characters out of the initial string.
If we don't see a @samp{-}, there's no range, and only
@code{first_wc} is pushed onto the end of the array.

@<get first wide character@>=
mbstate_t mbs;
size_t count;

memset(& mbs, 0, sizeof(mbs));

count = mbrtowc(& first_wc, cp, mb_cur_max, & mbs);
if (count == (size_t) -1 || count == (size_t) -2) {
	snprintf(errbuf, errbuf_size, "invalid multibyte sequence");
	goto fail;
}
cp += count;
@

@<get second wide character@>=
count = mbrtowc(& second_wc, cp, mb_cur_max, & mbs);
if (count == (size_t) -1 || count == (size_t) -2) {
	snprintf(errbuf, errbuf_size, "invalid multibyte sequence");
	goto fail;
}
cp += count;
@

Once we have the list of wide characters, sorting it is easy:

@<sort wide character list@>=
qsort(wide_chars, wc_inuse, sizeof(wint_t), wint_compare);
@

@noindent
The comparison function is trivial:

@<helper functions@>=
/* wint_compare --- compare two wint values for qsort */

static int
wint_compare(const void *l, const void *r)
{
	wint_t *left = (wint_t *) l;
	wint_t *right = (wint_t *) r;

	return *left - *right;
}
@

Now some of the fun begins:

@<condense wide character list into @code{RANGE_ITEM}s@>=
@<remove duplicate wide characters@>
@<generate @code{RANGE_ITEM}s@>
@

Condensing the list simply shifts the characters down
as duplicates are found.  This is painful if there are
maybe thousands of duplicates but for typical regular
expressions, there shouldn't be any problem.

@<remove duplicate wide characters@>=
size_t i, j;
for (i = 0, j = 1; j < wc_inuse; i++, j++) {
	if (wide_chars[i] == wide_chars[j]) {
		for (int k = j + 1; k < wc_inuse; j++, k++) {
			wide_chars[j] = wide_chars[k];
		}
		wide_chars[j] = 0;

		wc_inuse--;
		j = i + 1;
	}
}
wide_chars[wc_inuse] = 0;	// not strictly necessary, but doesn't hurt
@

Once we have a sorted and uniqued list of wide characters,
generating the correct ranges is relatively easy.

@<generate @code{RANGE_ITEM}s@>=
size_t range_start, total;
range_start = total = 0;
for (i = 0, j = 1; j < wc_inuse; i++, j++) {
	if (wide_chars[j] == wide_chars[i] + 1) {	// ab...
		continue;
	} else if (wide_chars[j] > wide_chars[i] + 1) {
		// acd...
		// push a and start next range at c
		if (! push_range_item(bracket_expr, ignore_case,
				wide_chars[range_start], wide_chars[i], errbuf, errbuf_size))
			goto fail;
		total++;
		range_start = j;
	}
}
// Get any final range or character
if (wc_inuse > 0 && range_start <= wc_inuse - 1) {
	if (! push_range_item(bracket_expr, ignore_case,
				wide_chars[range_start], wide_chars[wc_inuse-1], errbuf, errbuf_size))
			goto fail;
	total++;
}
wc_inuse = total;
@

Pushing a range item is straightforward, similar to @code{push_wc()}
earlier.  There is one wrinkle, which is if we're ignoring case,
we have to allow both the uppercase and the lowercase version of each
character.

@<helper functions@>=
/* push_range_item --- add a range item to the expression */

static bool
push_range_item(BRACKET_EXPR *bracket_expr, bool ignore_case,
				wint_t first, wint_t last,
				char *errbuf, size_t errbuf_size)
{
	@<grow the set of items if necessary@>
	set_item new_item;
	new_item.item_type = RANGE_ITEM;
	if (ignore_case) {
		new_item.start = towupper(first);
		new_item.end = towupper(last);
		bracket_expr->items[bracket_expr->nelems++] = new_item;

		new_item.start = towlower(first);
		new_item.end = towlower(last);
		bracket_expr->items[bracket_expr->nelems++] = new_item;
	} else {
		new_item.start = first;
		new_item.end = last;
		bracket_expr->items[bracket_expr->nelems++] = new_item;
	}

	return true;
}
@

The logic for growing the set will be needed also when we
add @code{CTYPE_ITEM}s, so we factor it out:

@<grow the set of items if necessary@>=
if (bracket_expr->nelems + 1 >= bracket_expr->allocated) {
	size_t old_amount = bracket_expr->allocated;
	size_t new_amount = bracket_expr->allocated * 2;
	set_item *new_set = (set_item *) realloc(bracket_expr->items,
										new_amount * sizeof(set_item));
	if (new_set == NULL) {
		snprintf(errbuf, errbuf_size, "no memory for more set items");
		return false;
	}
	memset(new_set + old_amount, 0, old_amount * sizeof(set_item));
	bracket_expr->allocated = new_amount;
	bracket_expr->items = new_set;
}
@

@<condense final array of @code{set_item}s@>=
// sort it
qsort(bracket_expr->items, bracket_expr->nelems,
	sizeof(set_item), item_compare_for_sorting);

// condense it
items = bracket_expr->items;
for (i = 0, j = 1; j < bracket_expr->nelems; i++, j++) {
	if (   items[i].item_type == CTYPE_ITEM
		&& items[j].item_type == CTYPE_ITEM
		&& items[i].iswXXX == items[j].iswXXX) {
		@<shift @code{items} down by one@>
	} else if (items[i].item_type != items[j].item_type) {
		continue;
	} else if (items[i].item_type == RANGE_ITEM) {
		@<condense overlapping ranges@>
	}
}
@

There are multiple possibilities for
overlapping ranges. For example, there's nothing stopping
someone from writing @code{[a-q12c-h]}, or @code{[bca123a-c]} or
almost anything else.  After sorting the various ranges, we
end up with the following possibilities:

@itemize @bullet
@item
Exact duplicate ranges:

@example
+---+---+
| a | d |        +---+---+
+---+---+   ==>  | a | d |
| a | d |        +---+---+
+---+---+
@end example

@noindent
The duplicate should be removed.

@item
Adjacent ranges.

@example
+---+---+
| a | d |                +---+---+
+---+---+---+----   ==>  | a | h |
        | e | h |        +---+---+
        +---+---+
@end example

@noindent
The first range should be expanded to include the
end point of the second, and the second one should
be removed.

@item
Completely overlapping:

@example
+----------+
| abcdefhi |          +---+---+
+----------+    ===>  | a | i |
|    def   |          +---+---+
+----------+
@end example

@noindent
The second one should be removed.

@item
Partially overlapping on the left:

@example
+----------+
| abcdef   |         +---+---+
+----------+    ===> | a | h |
|    defgh |         +---+---+
+----------+
@end example

@noindent
Since ranges are sorted by @code{start}, we won't
have overlapping on the right.
Here too, the end point of the first range
should become that of the second, and
the second should be removed.
@end itemize

The following sequence of statements implements the logic:

@<condense overlapping ranges@>=
bool need_shift = false;
if (items[i].start == items[j].start && items[i].end == items[j].end) {
	need_shift = true;
} else if (items[i].end + 1 == items[j].start) {
	items[i].end = items[j].end;
	need_shift = true;
} else if (items[i].start < items[j].start && items[i].end > items[j].end) {
	need_shift = true;
} else if (   items[i].start < items[j].start
           && items[i].end > items[j].start
           && items[j].end >= items[i].end) {
	items[i].end = items[j].end;
	need_shift = true;
}
if (need_shift) {
	@<shift @code{items} down by one@>
}
// otherwise, just continue around the loop
@

@<shift @code{items} down by one@>=
for (int k = j + 1; k < bracket_expr->nelems; j++, k++)
	items[j] = items[k];

bracket_expr->nelems--;
i--;	// compensate for loop, continue checking at current position
j = i + 1;
@

@node ctype items
@section Handling Character Classes Like @code{[:alpha:]}

Finally, it's time to deal with @code{[...[:alpha:]...]}.

@<process @code{[:...:]} items@>=
if (cp + 2 < last && cp[0] == '[' && cp[1] == ':') {
	size_t count = 0;
	int (*fp)(wint_t);

	fp = find_ctype_function(cp, & count,
								errbuf, errbuf_size);
	if (fp == NULL)
		goto fail;

	cp += count;
	if (! push_ctype_item(bracket_expr, ignore_case,
			fp, errbuf, errbuf_size))
		goto fail;

	cp--;	// compensate for loop
	continue;
}
@

@<helper functions@>=
/* find_ctype_function --- return the function for a character class */

typedef int (*ctype_func)(wint_t);
static ctype_func
find_ctype_function(const char *cp, size_t *count,
                    char *errbuf, size_t errbuf_size)
{
	for (int i = 0; ctype_functions[i].name != NULL; i++) {
		int len = strlen(ctype_functions[i].name);

		if (strncmp(cp, ctype_functions[i].name, len) == 0) {
			*count = len;

			return ctype_functions[i].fp;
		}
	}

	char *p = strchr(cp, ']');
	int l;
	if (p != NULL)
		l = (p - cp) + 1;
	else
		l = 5;	// guess

	snprintf(errbuf, errbuf_size, "unknown class %.*s", l, cp);

	return NULL;
}
@

Pushing a @code{CTYPE_ITEM} is similar to pushing a @code{RANGE_ITEM}.

@<helper functions@>=
/* push_ctype_item --- add a ctype item to the expression */

static bool
push_ctype_item(BRACKET_EXPR *bracket_expr, bool ignore_case,
				int (*funcp)(wint_t),
				char *errbuf, size_t errbuf_size)
{
	@<grow the set of items if necessary@>
	set_item new_item;
	new_item.item_type = CTYPE_ITEM;
	if (ignore_case && (funcp == iswupper || funcp == iswlower)) {
		new_item.iswXXX = iswupper;
		bracket_expr->items[bracket_expr->nelems++] = new_item;

		new_item.iswXXX = iswlower;
		bracket_expr->items[bracket_expr->nelems++] = new_item;
	} else {
		new_item.iswXXX = funcp;
		bracket_expr->items[bracket_expr->nelems++] = new_item;
	}

	return true;
}
@

@<process @code{[=...=} items@>=
/* [=...=] not implemented yet */
@

@<process @code{[.X.]} items@>=
/* [.X.] not implemented yet */
@

@node
@chapter A Test Program

The test program builds a set and then compares one or more characters
against the set.  It takes several options:

@table @option
@item -F
Expect failure. Mutually exclusive with @option{-S}.

@item -S
Expect success. Mutually exclusive with @option{-F}.

@item -d
Dump the data structure if the result isn't what's expected.

@item -e
Escapes are allowed. By default they are not.

@item -i
Ignore case when matching.
@end table

@(btest.c@)=
/* btest.c --- a test program for bracket_expr_create */

@<Copyright statement@>

@<main includes@>

@<usage function@>

/* main --- parse arguments, run the test */

int
main(int argc, char **argv)
{
	int i, c;
	wint_t wc;
	char *cp;
	bool expect_success = false, expect_failure = false;
	bool escapes_allowed = false, ignore_case = false;
	bool dump_data = false;

	@<parse command line arguments@>
	setlocale(LC_ALL, "");
	@<compile the expression@>
	@<test each wide character in the test case against the expression@>

	return EXIT_SUCCESS;
}
@

@<main includes@>=
@<includes@>
#include <getopt.h>
#include <locale.h>
#include "bracketexpr.h"
@

@<parse command line arguments@>=
while ((c = getopt(argc, argv, "SFdei")) != -1) {
	switch (c) {
	case 'S':
		expect_success = true;
		break;
	case 'F':
		expect_failure = true;
		break;
	case 'd':
		dump_data = true;
		break;
	case 'e':
		escapes_allowed = true;
		break;
	case 'i':
		ignore_case = true;
		break;
	case '?':
		usage(argv[0]);
		break;
	}
}

if (   (! expect_success && ! expect_failure)
    || (expect_success && expect_failure)) {
	fprintf(stderr, "Only one of -S or -F must be given\n");
	usage(argv[0]);
}
else if (optind + 2 > argc)	// no expr or no string provided
	usage(argv[0]);
@

@<usage function@>=
/* usage --- print a usage message and die */

static void
usage(const char *name)
{
	fprintf(stderr, "Usage: %s -S|-F [-dei] '[bracket-expression]' '<string of characters>'\n",
			name);
	fprintf(stderr, "\t-S\tExpect match success.\n");
	fprintf(stderr, "\t-F\tExpect failure of some kind.\n");
	fprintf(stderr, "\t-d\tDump the data structure.\n");
	fprintf(stderr, "\t-e\tEscapes are allowed.\n");
	fprintf(stderr, "\t-i\tIgnore case.\n");
	exit(EXIT_FAILURE);
}
@

@<compile the expression@>=
char errbuf[BUFSIZ];
size_t errbuf_size = sizeof(errbuf);
const BRACKET_EXPR *bracket_expr;
char *end;
bracket_expr = bracket_expr_create(argv[optind], & end, escapes_allowed,
				ignore_case, errbuf, errbuf_size);
if (bracket_expr == NULL && expect_success) {
	fprintf(stderr, "bad expression: %s\n", errbuf);
	// can't dump the data, return was NULL
	exit(EXIT_FAILURE);
}
@

@<test each wide character in the test case against the expression@>=
mbstate_t mbs;
memset(& mbs, 0, sizeof(mbs));
for (cp = argv[optind + 1]; *cp != '\0';) {
	size_t count;

	count = mbrtowc(& wc, cp, MB_CUR_MAX, & mbs);
	if (count == (size_t) -1 || count == (size_t) -2) {
		if (expect_success) {
			fprintf(stderr, "invalid multibyte sequence detected\n");
			@<dump the data if needed@>
			exit(EXIT_FAILURE);
		} else {
			cp++;	// skip over it and hope;
			memset(& mbs, 0, sizeof(mbs));	// reset the state
			continue;
		}
	} else
		cp += count;

	bool matched = bracket_expr_match(bracket_expr, wc);
	if (! matched && expect_success) {
		fprintf(stderr, "%s: failed to match L'%lc', success expected.\n", argv[optind], wc);
		@<dump the data if needed@>
		exit(EXIT_FAILURE);
	} else if (matched && expect_failure) {
		fprintf(stderr, "%s: succeeded to match L'%lc', failure expected.\n", argv[optind], wc);
		@<dump the data if needed@>
		exit(EXIT_FAILURE);
	}
}
@

@<dump the data if needed@>=
if (dump_data)
	bracket_expr_dump(bracket_expr, stdout);
@

@node Checking @code{bsearch()}
@appendix Checking Out @code{bsearch()}

As mentioned earlier, when working with @code{bsearch()} and writing
the comparison function, it helps to know which argument is the key
and which is the array element being compared.  This short demo program
demonstrates that on Ubuntu 22.04 and macOS, it's the first argument to
the comparison function that is the key.

@(bsearch-demo.c@)=
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int key;

int
compare(const void *l, const void *r)
{
	int *left = (int *) l;
	int *right = (int *) r;
	static bool lp = false, rp = false;

	if (left == & key && ! lp) {
		printf("left == key\n");
		lp = true;
	} else if (right == & key && ! rp) {
		printf("right == key\n");
		rp = true;
	}

	if (right == & key)
		return compare(r, l);	// swap them

	return *left - *right;
}

int
main(int argc, char **argv)
{
	int data[] = {
		1, 2, 3, 4, 5 ,6 ,7 ,8, 9, 10
	};

	key = 7;
	int *result = bsearch(& key, data, 10, sizeof(int), compare);

	printf("got %d, %p in %p - %p\n", *result, result,
			data, data + 10);

	return 0;
}
@

@noindent
When run on macOS, we get:

@example
$ @kbd{./bsearch-demo}
left == key
got 7, 0x7ff7bbe9d688 in 0x7ff7bbe9d670 - 0x7ff7bbe9d698
@end example

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::          Source files by definition.
* Code Chunk Definitions::    Code chunks by definition.
* Code Chunk References::     Code chunks by reference.
@end menu

@node File Definitions
@appendixsec Source File Definitions

@print_file_defs

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs

@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs

@node Concept Index
@unnumbered Index

@printindex cp

@bye

TODO:
